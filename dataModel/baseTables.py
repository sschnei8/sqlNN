import query

# Create table to hold input data in our training database
query.query(
"""
CREATE TABLE INPUT_DATA AS (
SELECT * 
FROM read_csv_auto('/Users/iamsam/Desktop/pyProjects/sqlNueralNet/digit-recognizer/train.csv')
);
"""
)

#%%
# [V1 Random WEIGHT INIT] Create table to hold all weights between input and first hidden layer 
query.query(
"""
-- TRUNCATE TABLE INPUT_WEIGHTS;
-- DROP TABLE IF EXISTS INPUT_WEIGHTS;

CREATE TEMP TABLE STAGE_INPUTS AS (
WITH RECURSIVE ALL_INPUTS (INPUT_LAYER) AS ( -- GENERATE 784 INPUT PIXELS
SELECT 0 AS INPUT_LAYER
UNION 
SELECT INPUT_LAYER + 1 AS INPUT_LAYER
FROM ALL_INPUTS
WHERE INPUT_LAYER < 783
)
SELECT * FROM ALL_INPUTS
);

CREATE TEMP TABLE STAGE_NUERONS AS (
WITH RECURSIVE TEN_NEURONS (NEURON) AS ( -- GENERATE TEN NERONS
SELECT 1 AS NEURON
UNION 
SELECT NEURON + 1 AS NEURON
FROM TEN_NEURONS
WHERE NEURON < 10
)

SELECT * FROM TEN_NEURONS
);

-- NOW WE CROSS JOIN INPUTS EXPLODING THE RESULT SET BY 784 ROWS FOR EACH NEURON
-- LASTLY WE ADD OUR WEIGHTS && CREATE OUR TABLE
CREATE TABLE INPUT_WEIGHTS AS (
SELECT N.NEURON
     , A.INPUT_LAYER
     , RANDOM() AS WEIGHT
FROM STAGE_NUERONS N
CROSS JOIN STAGE_INPUTS A
);
"""
)

# %%
# [V2 HE Weight Initialization FIRST LAYER]
query.query(
"""
-- TRUNCATE TABLE INPUT_WEIGHTS_HE_INIT;
-- DROP TABLE IF EXISTS INPUT_WEIGHTS_HE_INIT;

CREATE TEMP TABLE STAGE_INPUTS AS (
WITH RECURSIVE ALL_INPUTS (INPUT_LAYER) AS ( -- GENERATE 784 INPUT PIXELS
SELECT 0 AS INPUT_LAYER
UNION 
SELECT INPUT_LAYER + 1 AS INPUT_LAYER
FROM ALL_INPUTS
WHERE INPUT_LAYER < 783
)
SELECT * FROM ALL_INPUTS
);

CREATE TEMP TABLE STAGE_NUERONS AS (
WITH RECURSIVE TEN_NEURONS (NEURON) AS ( -- GENERATE TEN NERONS
SELECT 1 AS NEURON
UNION 
SELECT NEURON + 1 AS NEURON
FROM TEN_NEURONS
WHERE NEURON < 10
)

SELECT * FROM TEN_NEURONS
);

CREATE TABLE INPUT_WEIGHTS_HE_INIT AS (
-- SQRT(6 / N) WHERE N IS THE NUMBER OF INPUTS
WITH VARIANCE AS (
SELECT SQRT(6::FLOAT / COUNT(1)) AS VAR
FROM STAGE_INPUTS
)

-- NOW WE CROSS JOIN INPUTS EXPLODING THE RESULT SET BY 784 ROWS FOR EACH NEURON
-- LASTLY WE ADD OUR WEIGHTS && CREATE OUR TABLE
-- Because RANDOM() PRODUCES VALUES BETWEEN 0 & 1, WE SHIFT TO -1 & 1
SELECT N.NEURON
     , A.INPUT_LAYER
     , ((RANDOM() * 2) - 1) * V.VAR AS WEIGHT -- TRANSFORM TO NEW RANGE -1 -> 1, MULTIPLY BY VAR
FROM STAGE_NUERONS N
CROSS JOIN STAGE_INPUTS A
LEFT JOIN VARIANCE V ON 1=1 -- ADD VAR TO EACH ROW 
);
"""
)

# %%
# STORE A BIAS VALUE FOR EACH OF OUR NEURONS IN OUR FIRST HIDDEN LAYER 

query.query(
"""
CREATE TABLE BIAS_CACHE AS (
WITH RECURSIVE TEN_NEURONS (NEURON) AS ( -- GENERATE TEN NERONS
SELECT 1 AS NEURON
UNION 
SELECT NEURON + 1 AS NEURON
FROM TEN_NEURONS
WHERE NEURON < 10
)

SELECT NEURON
     , 0 AS BIAS  
FROM TEN_NEURONS
);
"""
)

# %%

# ------------------------------------------------
# *** FORWARD PASS TO FIRST HIDDEN LAYER ***]
# ------------------------------------------------

# 1. We take out 784 pixels and transpose them 
# 2. We Join them and their associated values to our input layer 
# 3. We Multiply Weight * The newly Joined values and sum for neuron 
# 4. We add our bias 
# 5. We apply our activation function via case statement ReLU for each node 

# 6. going to need some table to cache intermediate results just not sure what this looks like yet 

query.query(
"""
CREATE TEMP TABLE TRANSPOSED_PIXELS AS (
WITH ONE_IMAGE AS (
SELECT *
FROM INPUT_DATA 
WHERE ID = 1 -- FIRST IMAGE
),

TRANSPOSE AS (
UNPIVOT (FROM ONE_IMAGE) ON COLUMNS(*) INTO NAME PIXEL VALUE PIXEL_VALUE
)

SELECT PIXEL
     , PIXEL_VALUE
     , LTRIM(PIXEL, 'pixel') AS PIXEL_ID
FROM TRANSPOSE
WHERE PIXEL NOT IN ('id','label')
);

CREATE TABLE FIRST_HIDDEN_LAYER_VALUES AS (
WITH INPUT_TIMES_WEIGHT AS (
SELECT I.NEURON
     , I.INPUT_LAYER
     , I.WEIGHT
     , P.PIXEL_VALUE
     , I.WEIGHT * P.PIXEL_VALUE AS WEIGHTxVALUE
FROM INPUT_WEIGHTS_HE_INIT I
    LEFT JOIN TRANSPOSED_PIXELS P ON INPUT_LAYER = PIXEL_ID
), 

WEIGHTED_SUM AS (
SELECT T.NEURON
     , SUM(WEIGHTxVALUE) AS NEWVAL 
FROM INPUT_TIMES_WEIGHT T
GROUP BY 1
)

-- IMPLEMENT RELU
SELECT W.NEURON
     , CASE WHEN W.NEWVAL + B.BIAS < 0 THEN 0 
            ELSE W.NEWVAL + B.BIAS END AS ACTIVATED_WEIGHT     
FROM WEIGHTED_SUM W
    LEFT JOIN BIAS_CACHE B ON W.NEURON = B.NEURON

);

-- COPY CHECK123 TO 'output.csv' (HEADER, DELIMITER ',');
"""
)

# %%

# Initialize these weights between the First Hidden Layer and the Output layer 
# Ten Hidden Neurons * Ten Output Neurons = 100 Weights to initialize 
# Going to use HE Weight Initialization again

query.query(
"""
-- TRUNCATE TABLE HIDDEN_TO_OUTPUT_HE_INIT;
-- DROP TABLE IF EXISTS HIDDEN_TO_OUTPUT_HE_INIT;

CREATE TEMP TABLE STAGE_INPUTS AS (
WITH RECURSIVE HIDDEN_INPUTS (HIDDEN_LAYER) AS ( -- GENERATE OUR 10 HIDDEN NEURONS
SELECT 1 AS HIDDEN_LAYER
UNION 
SELECT HIDDEN_LAYER + 1 AS HIDDEN_LAYER
FROM HIDDEN_INPUTS
WHERE HIDDEN_LAYER < 10
)

SELECT * FROM HIDDEN_INPUTS
);

CREATE TEMP TABLE STAGE_OUTPUTS AS (
WITH RECURSIVE TEN_OUTPUTS (OUTPUT) AS ( -- GENERATE TEN OUTPUTS
SELECT 1 AS OUTPUT
UNION 
SELECT OUTPUT + 1 AS OUTPUT
FROM TEN_OUTPUTS
WHERE OUTPUT < 10
)

SELECT * FROM TEN_OUTPUTS
);

CREATE TABLE HIDDEN_WEIGHTS_HE_INIT AS (
-- SQRT(6 / N) WHERE N IS THE NUMBER OF INPUTS
WITH VARIANCE AS (
SELECT SQRT(6::FLOAT / COUNT(1)) AS VAR
FROM STAGE_INPUTS
)

-- NOW WE CROSS JOIN INPUTS EXPLODING THE RESULT SET BY 10 ROWS FOR EACH OUTPUT NDOE
-- LASTLY WE ADD OUR WEIGHTS && CREATE OUR TABLE
-- Because RANDOM() PRODUCES VALUES BETWEEN 0 & 1, WE SHIFT TO -1 & 1
SELECT N.OUTPUT
     , A.HIDDEN_LAYER
     , ((RANDOM() * 2) - 1) * V.VAR AS WEIGHT -- TRANSFORM TO NEW RANGE -1 -> 1, MULTIPLY BY VAR
FROM STAGE_OUTPUTS N
CROSS JOIN STAGE_INPUTS A
LEFT JOIN VARIANCE V ON 1=1 -- ADD VAR TO EACH ROW 
);
"""
)

# %%
# STORE A BIAS VALUE FOR EACH OF OUR OUTPUT NODES

query.query(
"""
CREATE TABLE OUTPUT_BIAS_CACHE AS (
WITH RECURSIVE TEN_OUTPUTS (OUTPUT) AS ( -- GENERATE TEN OUTPUTS
SELECT 1 AS OUTPUT
UNION 
SELECT OUTPUT + 1 AS OUTPUT
FROM TEN_OUTPUTS
WHERE OUTPUT < 10
)

SELECT OUTPUT
     , 0 AS BIAS  
FROM TEN_OUTPUTS
);
"""
)


# %% HIDDEN LAYER -> OUTPUT LAYER FORWARD PASS
query.query(
"""
WITH LAYER_ONE_VALUES AS (
SELECT NEURON
     , ACTIVATED_WEIGHT
FROM FIRST_HIDDEN_LAYER_VALUES
)






"""
)
# %%
query.query(
"""
SELECT * FROM HIDDEN_WEIGHTS_HE_INIT
"""
)
# %%
