import query

# Create table to hold input data in our training database
query.query(
"""
CREATE TABLE INPUT_DATA AS (
SELECT * 
FROM read_csv_auto('/Users/iamsam/Desktop/pyProjects/sqlNueralNet/digit-recognizer/train.csv')
);
"""
)

#%%
# Create table to hold all weights between input and first hidden layer 
query.query(
"""
TRUNCATE TABLE INPUT_WEIGHTS;
DROP TABLE IF EXISTS INPUT_WEIGHTS;

CREATE TEMP TABLE STAGE_INPUTS AS (
WITH RECURSIVE ALL_INPUTS (INPUT_LAYER) AS ( -- GENERATE 784 INPUT PIXELS
SELECT 0 AS INPUT_LAYER
UNION 
SELECT INPUT_LAYER + 1 AS INPUT_LAYER
FROM ALL_INPUTS
WHERE INPUT_LAYER < 783
)
SELECT * FROM ALL_INPUTS
);

CREATE TEMP TABLE STAGE_NUERONS AS (
WITH RECURSIVE TEN_NEURONS (NEURON) AS ( -- GENERATE TEN NERONS
SELECT 1 AS NEURON
UNION 
SELECT NEURON + 1 AS NEURON
FROM TEN_NEURONS
WHERE NEURON < 10
)

SELECT * FROM TEN_NEURONS
);

-- NOW WE CROSS JOIN INPUTS EXPLODING THE RESULT SET BY 784 ROWS FOR EACH NEURON
-- LASTLY WE ADD OUR WEIGHTS && CREATE OUR TABLE
CREATE TABLE INPUT_WEIGHTS AS (
SELECT N.NEURON
     , A.INPUT_LAYER
     , RANDOM() AS WEIGHT
FROM STAGE_NUERONS N
CROSS JOIN STAGE_INPUTS A
);
"""
)

# %%
# STORE A BIAS VALUE FOR EACH OF OUR NUERONS IN OUR FIRST HIDDEN LAYER 

query.query(
"""
CREATE TABLE BIAS_CACHE AS (
WITH RECURSIVE TEN_NEURONS (NEURON) AS ( -- GENERATE TEN NERONS
SELECT 1 AS NEURON
UNION 
SELECT NEURON + 1 AS NEURON
FROM TEN_NEURONS
WHERE NEURON < 10
)

SELECT NEURON
     , 0 AS BIAS  
FROM TEN_NEURONS
);
"""
)

# %%
