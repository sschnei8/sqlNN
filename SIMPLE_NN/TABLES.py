#%%
query(
"""
-- CREATE SCHEMA SIMPLE_NN;

DROP TABLE IF EXISTS SIMPLE_NN.L1_WEIGHTS;
CREATE TABLE SIMPLE_NN.L1_WEIGHTS (
INPUT_NODE INTEGER,
HIDDEN_LAYER INTEGER,
INPUT_VALUE DOUBLE,
WEIGHT DOUBLE
);

INSERT INTO SIMPLE_NN.L1_WEIGHTS(INPUT_NODE, HIDDEN_LAYER, INPUT_VALUE, WEIGHT)
VALUES
(1, 1, .05, .15),
(1, 2, .05, .25),
(2, 1, .10, .20),
(2, 2, .10, .30)
;


DROP TABLE IF EXISTS SIMPLE_NN.L1_BIAS;
CREATE TABLE SIMPLE_NN.L1_BIAS (
HIDDEN_LAYER INTEGER,
BIAS DOUBLE
);

INSERT INTO SIMPLE_NN.L1_BIAS(HIDDEN_LAYER, BIAS)
VALUES
(1, .35),
(2, .35)
;


DROP TABLE IF EXISTS  SIMPLE_NN.L2_WEIGHTS;
CREATE TABLE SIMPLE_NN.L2_WEIGHTS (
HIDDEN_LAYER INTEGER,
OUTPUT_NODE INTEGER,
HIDDEN_VALUE DOUBLE,
WEIGHT DOUBLE
);

INSERT INTO SIMPLE_NN.L2_WEIGHTS(HIDDEN_LAYER, OUTPUT_NODE, HIDDEN_VALUE, WEIGHT)
VALUES
(1, 1, NULL, .40),
(1, 2, NULL, .45),
(2, 1, NULL, .50),
(2, 2, NULL, .55)
;


DROP TABLE IF EXISTS  SIMPLE_NN.L2_BIAS;
CREATE TABLE SIMPLE_NN.L2_BIAS (
OUTPUT_NODE INTEGER,
BIAS DOUBLE
);

INSERT INTO SIMPLE_NN.L2_BIAS(OUTPUT_NODE, BIAS)
VALUES
(1, .6),
(2, .6)
;

DROP TABLE IF EXISTS  SIMPLE_NN.EULERS_NUMBER;
CREATE TABLE SIMPLE_NN.EULERS_NUMBER AS (
WITH RECURSIVE INF_SERIES (N, FACTORIAL, TERM, NSUM) AS (

SELECT 0 AS N
     , 1::UBIGINT AS FACTORIAL -- UNSIGNED EIGHT-BYTE INTEGER
     , 1.000 AS TERM
     , 1::DOUBLE AS NSUM
UNION ALL
SELECT N + 1 AS N
     , FACTORIAL * (N + 1) AS FACTORIAL
     , 1.0 / (FACTORIAL * (N + 1)) AS TERM
     , NSUM + (1.0 / (FACTORIAL * (N + 1))) AS NSUM
FROM INF_SERIES
WHERE N < 14 -- Gets us a DOUBLE fairly close to Euler's Number
)

SELECT NSUM AS e
FROM INF_SERIES
QUALIFY ROW_NUMBER() OVER(ORDER BY N DESC) = 1
);


DROP TABLE IF EXISTS SIMPLE_NN.RESULT_CACHE;
CREATE TABLE SIMPLE_NN.RESULT_CACHE (
INSERT_TIME TIMESTAMP,
OUTPUT_NODE INTEGER,
PREDICTED_VALUE DOUBLE,
ACTUAL_VALUE DOUBLE,
);


DROP TABLE IF EXISTS  SIMPLE_NN.L2_WEIGHT_CACHE;
CREATE TABLE SIMPLE_NN.L2_WEIGHT_CACHE (
INSERT_TIME TIMESTAMP,
HIDDEN_LAYER INTEGER,
OUTPUT_NODE INTEGER,
HIDDEN_VALUE DOUBLE,
WEIGHT DOUBLE,
UPDATED_WEIGHT DOUBLE
);


DROP TABLE IF EXISTS  SIMPLE_NN.L1_WEIGHT_CACHE;
CREATE TABLE SIMPLE_NN.L1_WEIGHT_CACHE (
INSERT_TIME TIMESTAMP,
INPUT_NODE INTEGER,
HIDDEN_LAYER INTEGER,
INPUT_VALUE DOUBLE,
WEIGHT DOUBLE,
UPDATED_WEIGHT DOUBLE
);
"""
)