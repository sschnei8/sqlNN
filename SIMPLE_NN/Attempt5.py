# INPUT -> HIDDEN
query1 = """
WITH MATRIX_MULT_L1 AS (
SELECT A.HIDDEN_LAYER
     , SUM(A.INPUT_VALUE * A.WEIGHT) AS INPxWEI
FROM SIMPLE_NN.L1_WEIGHTS A
GROUP BY 1
),

L1_ACTIVATION AS (
SELECT A.HIDDEN_LAYER
     , INPxWEI + B.BIAS AS PRE_ACTIVATION_VALUE
     , 1.0 / (1 + e^(PRE_ACTIVATION_VALUE * -1)) AS POST_ACTIVATION_VALUE
FROM MATRIX_MULT_L1 A
    INNER JOIN SIMPLE_NN.L1_BIAS B ON A.HIDDEN_LAYER = B.HIDDEN_LAYER
    INNER JOIN SIMPLE_NN.EULERS_NUMBER ON 1 = 1
)

UPDATE SIMPLE_NN.L2_WEIGHTS S
SET HIDDEN_VALUE = L.POST_ACTIVATION_VALUE,
FROM L1_ACTIVATION L
WHERE S.HIDDEN_LAYER = L.HIDDEN_LAYER;
"""

# Hidden to output
query2 = """
WITH MATRIX_MULT_L2 AS (
SELECT A.HIDDEN_LAYER
     , SUM(A.HIDDEN_VALUE * A.WEIGHT) AS INPxWEI
FROM SIMPLE_NN.L2_WEIGHTS A
GROUP BY 1
),

L2_ACTIVATION AS (
SELECT A.HIDDEN_LAYER
     , INPxWEI + B.BIAS AS PRE_ACTIVATION_VALUE
     , 1.0 / (1 + e^(PRE_ACTIVATION_VALUE * -1)) AS POST_ACTIVATION_VALUE
FROM MATRIX_MULT_L2 A
    INNER JOIN SIMPLE_NN.L2_BIAS B ON A.HIDDEN_LAYER = B.OUTPUT_NODE
    INNER JOIN SIMPLE_NN.EULERS_NUMBER ON 1 = 1
)

INSERT INTO SIMPLE_NN.RESULT_CACHE (
SELECT CURRENT_TIMESTAMP AS INSERT_TIME
     , HIDDEN_LAYER AS OUTPUT_NODE
     , POST_ACTIVATION_VALUE AS PREDICTED_VALUE
     , CASE WHEN OUTPUT_NODE = 1 THEN .6
            WHEN OUTPUT_NODE = 2 THEN .4 END AS ACTUAL_VALUE
FROM L2_ACTIVATION
)
"""

# back prop output -> hidden
query3 = """
WITH HIDDEN_VALUE_CONSOLIDATION AS (
SELECT HIDDEN_LAYER
     , HIDDEN_VALUE
FROM SIMPLE_NN.L2_WEIGHTS
GROUP BY 1,2
),

GRADIENT AS (
SELECT S.OUTPUT_NODE
     , -1 * (S.ACTUAL_VALUE - S.PREDICTED_VALUE) AS ERROR_OUTPUT
     , S.PREDICTED_VALUE * (1 - S.PREDICTED_VALUE) AS ACTIVATION_FUNC_DERIVATIVE
     , ERROR_OUTPUT * ACTIVATION_FUNC_DERIVATIVE * H.HIDDEN_VALUE AS BACK_PROP_GRADIENT_L2
FROM SIMPLE_NN.RESULT_CACHE S
    INNER JOIN HIDDEN_VALUE_CONSOLIDATION H ON S.OUTPUT_NODE = H.HIDDEN_LAYER
),

UPDATED_WEIGHT AS (
SELECT W.HIDDEN_LAYER
     , W.OUTPUT_NODE
     , W.HIDDEN_VALUE
     , W.WEIGHT
     , CASE WHEN G.BACK_PROP_GRADIENT_L2 > 1 THEN 1
            WHEN G.BACK_PROP_GRADIENT_L2 < -1 THEN -1
            ELSE G.BACK_PROP_GRADIENT_L2 END AS CLIPPED_GRADIENT
     , W.WEIGHT - (0.25 * CLIPPED_GRADIENT) AS UPDATED_WEIGHT -- LEARNING RATE OF .25
FROM SIMPLE_NN.L2_WEIGHTS W
    INNER JOIN GRADIENT G ON  W.HIDDEN_LAYER = G.OUTPUT_NODE
)

INSERT INTO SIMPLE_NN.L2_WEIGHT_CACHE (
SELECT CURRENT_TIMESTAMP AS INSERT_TIME
     , HIDDEN_LAYER
     , OUTPUT_NODE
     , HIDDEN_VALUE
     , WEIGHT
     , UPDATED_WEIGHT
FROM UPDATED_WEIGHT
);
"""

#Back prop hidden -> input
query4 ="""
WITH LATEST_OUTPUT AS (
SELECT OUTPUT_NODE
     , PREDICTED_VALUE
     , ACTUAL_VALUE
FROM SIMPLE_NN.RESULT_CACHE
QUALIFY ROW_NUMBER() OVER(ORDER BY INSERT_TIME DESC) <= 2 -- ONLY LATEST PREDICTIONS
),

BACK_PROP_CALC_H1 AS (
SELECT W.HIDDEN_LAYER
     , W.OUTPUT_NODE
     , W.HIDDEN_VALUE
     , W.WEIGHT
     , S.PREDICTED_VALUE
     , S.ACTUAL_VALUE
     , -1 * (S.ACTUAL_VALUE - S.PREDICTED_VALUE) AS ERROR_OUTPUT
     , S.PREDICTED_VALUE * (1 - S.PREDICTED_VALUE) AS ACTIVATION_FUNC_DERIVATIVE
     , ERROR_OUTPUT * ACTIVATION_FUNC_DERIVATIVE * W.WEIGHT AS ERROR_RESPECT_TO_OUTPUT
FROM SIMPLE_NN.L2_WEIGHTS W
       LEFT JOIN LATEST_OUTPUT S ON W.OUTPUT_NODE = S.OUTPUT_NODE
WHERE W.HIDDEN_LAYER = 1 -- ONLY THE TWO WEIGHTS
),

BACK_PROP_CALC_H2 AS (
SELECT W.HIDDEN_LAYER
     , W.OUTPUT_NODE
     , W.HIDDEN_VALUE
     , W.WEIGHT
     , S.PREDICTED_VALUE
     , S.ACTUAL_VALUE
     , -1 * (S.ACTUAL_VALUE - S.PREDICTED_VALUE) AS ERROR_OUTPUT
     , S.PREDICTED_VALUE * (1 - S.PREDICTED_VALUE) AS ACTIVATION_FUNC_DERIVATIVE
     , ERROR_OUTPUT * ACTIVATION_FUNC_DERIVATIVE * W.WEIGHT AS ERROR_RESPECT_TO_OUTPUT
FROM SIMPLE_NN.L2_WEIGHTS W
       LEFT JOIN LATEST_OUTPUT S ON W.OUTPUT_NODE = S.OUTPUT_NODE
WHERE W.HIDDEN_LAYER = 2 -- ONLY THE TWO WEIGHTS
),

ERROR_AGG AS (
SELECT HIDDEN_LAYER
     , HIDDEN_VALUE
     , SUM(ERROR_RESPECT_TO_OUTPUT) AS NET_OUT
FROM BACK_PROP_CALC_H1
GROUP BY 1,2

UNION ALL

SELECT HIDDEN_LAYER
     , HIDDEN_VALUE
     , SUM(ERROR_RESPECT_TO_OUTPUT) AS NET_OUT
FROM BACK_PROP_CALC_H2
GROUP BY 1,2
),

INPUT_VALUES AS (
SELECT INPUT_NODE
     , INPUT_VALUE
FROM SIMPLE_NN.L1_WEIGHTS
GROUP BY 1,2
),

ADJUSTMENT AS (
SELECT E.HIDDEN_LAYER
     , E.HIDDEN_VALUE
     , E.HIDDEN_VALUE *(1 - E.HIDDEN_VALUE) AS ACT_DERIVATIVE
     , E.NET_OUT
     , I.INPUT_VALUE
     , ACT_DERIVATIVE * NET_OUT * INPUT_VALUE AS NET_W
FROM ERROR_AGG E
    LEFT JOIN INPUT_VALUES I ON E.HIDDEN_LAYER = I.INPUT_NODE
),

UPDATED_WEIGHTS AS(
SELECT L.INPUT_NODE
     , L.HIDDEN_LAYER
     , L.INPUT_VALUE
     , L.WEIGHT
     , A.NET_W
     , L.WEIGHT - (.25 * A.NET_W) AS UPDATED_WEIGHT
FROM SIMPLE_NN.L1_WEIGHTS L
     LEFT JOIN ADJUSTMENT A ON L.HIDDEN_LAYER = A.HIDDEN_LAYER
)

INSERT INTO SIMPLE_NN.L1_WEIGHT_CACHE (
SELECT CURRENT_TIMESTAMP AS INSERT_TIME
     , INPUT_NODE
     , HIDDEN_LAYER
     , INPUT_VALUE
     , WEIGHT
     , UPDATED_WEIGHT
FROM UPDATED_WEIGHTS
)
"""

# Update L1 Weights
query5 = """
DROP TABLE IF EXISTS LATEST_L1_WEIGHTS;
CREATE TEMP TABLE LATEST_L1_WEIGHTS AS(
SELECT INPUT_NODE
     , HIDDEN_LAYER
     , UPDATED_WEIGHT
FROM SIMPLE_NN.L1_WEIGHT_CACHE
QUALIFY ROW_NUMBER() OVER(ORDER BY INSERT_TIME DESC) <= 4 -- ONLY LATEST WEIGHTS
);

-- PERFORM OUR UPDATES TO L1 WEIGHTS
UPDATE SIMPLE_NN.L1_WEIGHTS L
SET WEIGHT = W.UPDATED_WEIGHT
FROM LATEST_L1_WEIGHTS W
WHERE L.INPUT_NODE = W.INPUT_NODE
  AND L.HIDDEN_LAYER = W.HIDDEN_LAYER
"""

#Update L2 Weights
query6 = """
DROP TABLE IF EXISTS LATEST_L2_WEIGHTS;
CREATE TEMP TABLE LATEST_L2_WEIGHTS AS(
SELECT HIDDEN_LAYER
     , OUTPUT_NODE
     , UPDATED_WEIGHT
FROM SIMPLE_NN.L2_WEIGHT_CACHE
QUALIFY ROW_NUMBER() OVER(ORDER BY INSERT_TIME DESC) <= 4 -- ONLY LATEST WEIGHTS
);

-- PERFORM OUR UPDATES TO L2 WEIGHTS
UPDATE SIMPLE_NN.L2_WEIGHTS L
SET WEIGHT = W.UPDATED_WEIGHT
FROM LATEST_L2_WEIGHTS W
WHERE L.HIDDEN_LAYER = W.HIDDEN_LAYER
  AND L.OUTPUT_NODE = W.OUTPUT_NODE
"""
